name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure the full history is fetched to access all tags

      # Set up Java 21
      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Build using Maven
      - name: Build using Maven
        run: mvn clean install

      # Set up Docker
      - name: Docker setup
        uses: docker/setup-buildx-action@v3

      # Determine Version
      - name: Determine Version
        id: version
        run: |
          # Define the major version (set this manually or dynamically if needed)
          MAJOR_VERSION=1

          # Fetch the latest tag matching the major version or default to "1.0"
          LATEST_TAG=$(git tag -l "${MAJOR_VERSION}.*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found, starting from 1.0"
            LATEST_TAG="${MAJOR_VERSION}.0"
          fi
          echo "Latest tag: $LATEST_TAG"

          # Extract the minor version and increment it
          MINOR_VERSION=$(echo "$LATEST_TAG" | awk -F. '{print $2}')
          NEW_MINOR_VERSION=$((MINOR_VERSION + 1))

          # Construct the new version
          NEW_VERSION="${MAJOR_VERSION}.${NEW_MINOR_VERSION}"
          echo "New version: $NEW_VERSION"

          # Set output for later steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$NEW_VERSION"

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 471112905705.dkr.ecr.ap-south-1.amazonaws.com

      # Build and Push Docker Image
      - name: Build and Push Docker Image
        env:
          VERSION: ${{ env.NEW_VERSION }}
        run: |
          echo "Building Docker image with version: $VERSION"
          docker build -t locals:$VERSION .
          docker tag locals:$VERSION 471112905705.dkr.ecr.ap-south-1.amazonaws.com/locals:$VERSION
          docker push 471112905705.dkr.ecr.ap-south-1.amazonaws.com/locals:$VERSION
